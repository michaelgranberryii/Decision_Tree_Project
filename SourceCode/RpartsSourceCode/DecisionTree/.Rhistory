control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "gini"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "information"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "information"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "information"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "information"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "information"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "information"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "information"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "information"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "information"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "information"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "information"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "information"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "information"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "gini"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "gini"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "gini"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "gini"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "gini"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "gini"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "gini"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "gini"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "gini"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "gini"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "gini"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "gini"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "gini"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "gini"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "gini"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "gini"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "gini"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "gini"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "gini"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "gini"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "gini"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "gini"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
library(rpart)
library(rpart.plot)
library(readr)
### Importing Data Set ===============================================
dataSet <- read.csv("Decision Tree.csv") # Import data file
str(dataSet) # Preview at data
head(dataSet) # Preview first 6 rows of data
### Create Test and Train Data Set ===================================
set.seed(100) # Ensure same split for train and test data set
rand.order <- runif(nrow(dataSet)) # Generate 46 random numbers
dataSetShuffled <- dataSet[order(rand.order),] # Shuffle data set
dataSetTrain <- dataSetShuffled[1:30,] # Split data: 30 for training set
dataSetTest <- dataSetShuffled[31:50,] # Split data: 20 for test set
str(dataSetTrain) # Preview train data set
str(dataSetTest) # Preview test data set
### Computing Gini for each independent variabe ======================
# For demonstration purposes
# First round of Gini index computation
gini_process <-function(classes,splitvar = NULL){
#Assumes Splitvar is a logical vector
if (is.null(splitvar)){
base_prob <-table(classes)/length(classes)
return(1-sum(base_prob**2))
}
base_prob <-table(splitvar)/length(splitvar)
crosstab <- table(classes,splitvar)
crossprob <- prop.table(crosstab,2)
No_Node_Gini <- 1-sum(crossprob[,1]**2)
Yes_Node_Gini <- 1-sum(crossprob[,2]**2)
return(sum(base_prob * c(No_Node_Gini,Yes_Node_Gini)))
}
gini_process(dataSetTrain$Do.you.prefer.in.person.or.online.learning.,
dataSetTrain$How.far.do.you.commute.to.school.) # 0.49597
gini_process(dataSetTrain$Do.you.prefer.in.person.or.online.learning.,
dataSetTrain$Do.you.have.experience.with.online.classes.) # 0.4689655
gini_process(dataSetTrain$Do.you.prefer.in.person.or.online.learning.,
dataSetTrain$Do.you.have.easy.access.to.the.internet.) # 0.4689655
gini_process(dataSetTrain$Do.you.prefer.in.person.or.online.learning.,
dataSetTrain$Are.you.the.owner.of.the.computer.you.use.for.school.) # 0.4642857
gini_process(dataSetTrain$Do.you.prefer.in.person.or.online.learning.,
dataSetTrain$Do.you.easily.get.distracted.at.home.) #  0.4643939
gini_process(dataSetTrain$Do.you.prefer.in.person.or.online.learning.,
dataSetTrain$Are.you.taking.a.lab.) #  0.4910053
gini_process(dataSetTrain$Do.you.prefer.in.person.or.online.learning.,
dataSetTrain$In.general..do.you.prefer.labs.online.or.in.person..) # 0.3305556, Lowest impurity = Root node of tree
### Create Decision Tree ============================================
treeControls <- rpart.control(cp = 0, minsplit = 1) # Set tree controls: Grow full tree
# How does Dependent variable depend on independent variables
trainingFormula <- Do.you.prefer.in.person.or.online.learning.~
How.far.do.you.commute.to.school.+
Do.you.have.experience.with.online.classes.+
Do.you.have.easy.access.to.the.internet.+
Are.you.the.owner.of.the.computer.you.use.for.school.+
Do.you.easily.get.distracted.at.home.+
Are.you.taking.a.lab.+
In.general..do.you.prefer.labs.online.or.in.person..
# Timer
start_time <- Sys.time()
# Build Tree
fullTree <- rpart(formula = trainingFormula,
data = dataSetTrain, # Use training data set
method = "class", # Classification tree analysis
parms = list(split = "gini"), # Use gini index to split at decision nodes
control = treeControls)
rpart.plot(fullTree, extra = 1) # Plot classification tree
# Stop Timer
end_time <- Sys.time()
end_time - start_time
### Make Prediction ================================================
predictCART<- predict(fullTree, # Name of Tree
newdata = dataSetTest, # Data we want to make predictions for
type = "class")
# Confusion matrix to compute model accuracy
(predTable = table(dataSetTest$Do.you.prefer.in.person.or.online.learning., predictCART))
# (Correct predictions) / (Total number of observations in test set)
(predict.accuracy = (predTable[1,1]+predTable[2,2]) / (nrow(dataSetTest)))
